import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import FSInputFile, BufferedInputFile
import matplotlib.pyplot as plt
import numpy as np
import io
import requests
from bs4 import BeautifulSoup

TOKEN = ""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("expenses.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS expenses (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        month TEXT,
                        food REAL DEFAULT 0,
                        transport REAL DEFAULT 0,
                        housing REAL DEFAULT 0,
                        clothing REAL DEFAULT 0,
                        entertainment REAL DEFAULT 0,
                        health REAL DEFAULT 0,
                        education REAL DEFAULT 0
                    )''')
    conn.commit()
    conn.close()

init_db()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏—é"), KeyboardButton(text="üíæ –ú–∏—Ñ")],
        [KeyboardButton(text="üìà –ò–Ω—Ñ–ª—è—Ü–∏—è –†–æ—Å—Å—Ç–∞—Ç"), KeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_handler(message: Message):
    message_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç <b>–ú–æ—è –∏–Ω—Ñ–ª—è—Ü–∏—è</b>, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, "
        "–Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à–∏ –æ—â—É—â–µ–Ω–∏—è –æ–± –∏–Ω—Ñ–ª—è—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n\n"
        "üìä –ú–Ω–æ–≥–∏–µ –¥—É–º–∞—é—Ç, —á—Ç–æ —Ü–µ–Ω—ã —Ä–∞—Å—Ç—É—Ç –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –†–æ—Å—Å—Ç–∞—Ç. "
        "–ù–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∏–Ω—Ñ–ª—è—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ —à–∏—Ä–æ–∫–æ–π –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥, "
        "–∞ –ª–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã —É –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–Ω—ã–µ. –ï—Å–ª–∏ –≤—ã —á–∞—â–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø–æ–¥–æ—Ä–æ–∂–∞–≤—à–∏–µ —Ç–æ–≤–∞—Ä—ã, "
        "–≤–∞–º –º–æ–∂–µ—Ç –∫–∞–∑–∞—Ç—å—Å—è, —á—Ç–æ –∏–Ω—Ñ–ª—è—Ü–∏—è –≤—ã—à–µ. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç–æ–∂–µ –∏–≥—Ä–∞–µ—Ç —Ä–æ–ª—å: "
        "–º—ã –∑–∞–º–µ—á–∞–µ–º —Ä–æ—Å—Ç —Ü–µ–Ω —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –∏—Ö —Å–Ω–∏–∂–µ–Ω–∏–µ.\n\n"
        "‚ùì <b>–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è –∏–º–µ–Ω–Ω–æ —É –≤–∞—Å?</b> –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø–æ—Å—á–∏—Ç–∞–µ–º! "
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –ª–∏—á–Ω—É—é –∏–Ω—Ñ–ª—è—Ü–∏—é –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –µ—ë —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π."
    )
    await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile('./images/start.png', 'rb'), caption=message_text, reply_markup=main_menu, parse_mode="HTML")

@dp.message(lambda message: message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã")
async def input_expenses(message: Message):
    await message.answer("üìå –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nüìÖ –º–µ—Å—è—Ü (—á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 03 –¥–ª—è –º–∞—Ä—Ç–∞)\nüçΩÔ∏è –µ–¥–∞\nüöå —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\nüè† –∂–∏–ª—å–µ\nüëï –æ–¥–µ–∂–¥–∞\nüéâ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n‚ù§Ô∏è –∑–¥–æ—Ä–æ–≤—å–µ\nüìö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n\n–ü—Ä–∏–º–µ—Ä: 02 15000 2000 22000 1000 8000 3000 10000")

@dp.message(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def delete_expense_prompt(message: Message):
    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ <b>–º–µ—Å—è—Ü</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 03 –¥–ª—è –º–∞—Ä—Ç–∞), –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", parse_mode="HTML")

@dp.message(lambda message: message.text.isdigit() and len(message.text) == 2)
async def delete_expense(message: Message):
    user_id = message.from_user.id
    month = message.text
    
    conn = sqlite3.connect("expenses.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM expenses WHERE user_id = ? AND month = ?", (user_id, month))
    conn.commit()
    conn.close()
    
    await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü <b>{month}</b> —É–¥–∞–ª–µ–Ω—ã!", parse_mode="HTML")

@dp.message(lambda message: message.text == "üíæ –ú–∏—Ñ")
async def send_myth(message: Message):
    message_text = (
    "üìà –ö–∞–∫ –≤–∏–¥–∏—Ç–µ, —Ä–∞—Å—á—ë—Ç –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, "
    "–Ω–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞. –†–æ—Å—Å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏, "
    "—É—á–∏—Ç—ã–≤–∞—è —Ü–µ–Ω—ã —Ç—ã—Å—è—á —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ. –ï—Å–ª–∏ –≤–∞—à–∞ –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è –≤—ã—à–µ, —ç—Ç–æ –º–æ–∂–µ—Ç "
    "–±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –≤–∞—à–∏–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –∏–ª–∏ —Ç–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ—Ä–æ–∂–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ –¥—Ä—É–≥–∏—Ö.\n\n"
    "üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:\n\n"
    "üíµ –ò–Ω—Ñ–ª—è—Ü–∏—è ‚Äì —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Ç —Ü–µ–Ω, –Ω–æ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–µ–Ω–µ–≥. "
    "–ß—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è, –≤–∞–∂–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–¥ –ø–æ–¥—É—à–∫–æ–π.\n\n"
    "üõí –†–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Ä–æ–∂–∞—é—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–Ω—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É –º–æ–≥—É—Ç "
    "—Å–Ω–∏–∂–∞—Ç—å—Å—è –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∞ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è ‚Äì —Ä–∞—Å—Ç–∏ –∏–∑-–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –º–∏—Ä–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤.\n\n"
    "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≤–∫–ª–∞–¥—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏—é. –î–µ–ø–æ–∑–∏—Ç—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏, "
    "–æ–±–ª–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏.\n\n"
    "‚úÖ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á—ë—Ç –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–∏, –Ω–æ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, "
    "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Ä–∞–∑—É–º–Ω–µ–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!"
    )
    await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile('./images/myth.png', 'rb'))
    await message.answer(text=message_text)

@dp.message(lambda message: message.text == "üìà –ò–Ω—Ñ–ª—è—Ü–∏—è –†–æ—Å—Å—Ç–∞—Ç")
async def key_index_send(message: Message):
    url = 'https://cbr.ru/key-indicators/'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")
    inflation_values = soup.find_all("div", class_="value")  # –ù–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    key_inflation = inflation_values[1].text.strip()
    print(inflation_values)
    month_values = soup.find_all("div", class_="denotement")
    print(month_values)
    key_month = month_values[1].text.strip()
    message_text = "üìà –¢–µ–∫—É—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –æ—Ç –¶–ë –†–§ –Ω–∞ " + key_month + " –≥–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: " + key_inflation
    await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile('./images/rosstat.png', 'rb'), caption=message_text)



@dp.message(lambda message: message.text == "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏—é")
async def calculate_inflation(message: Message):
    await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile('./images/inflation.png', 'rb'))
    user_id = message.from_user.id
    conn = sqlite3.connect("expenses.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM expenses WHERE user_id = ? ORDER BY month DESC LIMIT 2", (user_id,))
    records = cursor.fetchall()
    
    if len(records) == 0:
        await message.answer("üìå –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –∏ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nüìÖ –º–µ—Å—è—Ü (—á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 03 –¥–ª—è –º–∞—Ä—Ç–∞)\nüçΩÔ∏è –µ–¥–∞\nüöå —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\nüè† –∂–∏–ª—å–µ\nüëï –æ–¥–µ–∂–¥–∞\nüéâ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n‚ù§Ô∏è –∑–¥–æ—Ä–æ–≤—å–µ\nüìö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n\n–ü—Ä–∏–º–µ—Ä: 02 15000 2000 22000 1000 8000 3000 10000\n03 15000 3000 22500 800 4000 11000")
        return
    elif len(records) == 1:
        await message.answer("üìå –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nüìÖ –º–µ—Å—è—Ü (—á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 03 –¥–ª—è –º–∞—Ä—Ç–∞)\nüçΩÔ∏è –µ–¥–∞\nüöå —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\nüè† –∂–∏–ª—å–µ\nüëï –æ–¥–µ–∂–¥–∞\nüéâ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n‚ù§Ô∏è –∑–¥–æ—Ä–æ–≤—å–µ\nüìö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n\n–ü—Ä–∏–º–µ—Ä: 02 15000 2000 22000 1000 8000 3000 10000")
        return
    
    last_month = records[-1]
    this_month = records[-2]
    
    last_total = sum(last_month[3:])
    this_total = sum(this_month[3:])
    
    if last_total == 0:
        inflation_rate = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü)"
    else:
        inflation_rate = ((this_total - last_total) / last_total) * 100
    
    inflation_message = f"üìà –û–±—â–∞—è –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è: {inflation_rate:.2f}%\n\n"

    last_month_summary = "–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü: " + str(last_total) + "\n"
    this_month_summary = "–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: " + str(this_total) + "\n"
    
    categories = ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ñ–∏–ª—å–µ", "–û–¥–µ–∂–¥–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ó–¥–æ—Ä–æ–≤—å–µ", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"]
    last_values = np.array(last_month[3:])
    this_values = np.array(this_month[3:])
    
    recommendations = "\nüìå –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
    personalized_advice = {
        "–ï–¥–∞": "–ü–æ–ø—Ä–æ–±—É–π –≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–º–∞ —á–∞—â–µ ‚Äì —ç—Ç–æ –º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –±—é–¥–∂–µ—Ç.",
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "–ò—Å–ø–æ–ª—å–∑—É–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –∫–∞—Ä—à–µ—Ä–∏–Ω–≥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.",
        "–ñ–∏–ª—å–µ": "–ü—Ä–æ–≤–µ—Ä—å —Ç–∞—Ä–∏—Ñ—ã –ñ–ö–•, –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
        "–û–¥–µ–∂–¥–∞": "–ü–æ–¥–æ–∂–¥–∏ —Å–µ–∑–æ–Ω–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π second-hand –º–∞–≥–∞–∑–∏–Ω—ã.",
        "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "–¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª –º–Ω–æ–≥–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π –≥–æ—Ä–æ–¥—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
        "–ó–¥–æ—Ä–æ–≤—å–µ": "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –≤ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫—É ‚Äì —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –±–æ–ª—å—à–∏—Ö –∑–∞—Ç—Ä–∞—Ç –≤ –±—É–¥—É—â–µ–º.",
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "–ò—â–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã, —á—Ç–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã."
    }
    
    for i, category in enumerate(categories):
        change = ((this_values[i] - last_values[i]) / last_values[i]) * 100 if last_values[i] != 0 else 0
        if change > 20:
            recommendations += f"‚ö†Ô∏è {category}: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤. {personalized_advice[category]}\n"
        elif 10 <= change <= 20:
            recommendations += f"‚ÑπÔ∏è {category}: –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤. {personalized_advice[category]}\n"
        elif change < -10:
            recommendations += f"‚úÖ {category}: –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–∫—Ä–∞—Ç–∏–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã.\n"


    fig, axes = plt.subplots(1, 2, figsize=(10, 5))  # –ß—É—Ç—å —É–º–µ–Ω—å—à–∏–ª —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–∞–ª–∞–Ω—Å–∞

    colors = plt.cm.Paired.colors  

    # –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
    wedges1, _, autotexts1 = axes[0].pie(
        last_values, autopct='%1.1f%%', colors=colors,
        textprops={'fontsize': 10}, wedgeprops={'edgecolor': 'black'}, pctdistance=1.2
    )
    axes[0].set_title("–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", fontsize=12, pad=15)  # –î–æ–±–∞–≤–∏–ª –æ—Ç—Å—Ç—É–ø

    # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    wedges2, _, autotexts2 = axes[1].pie(
        this_values, autopct='%1.1f%%', colors=colors,
        textprops={'fontsize': 10}, wedgeprops={'edgecolor': 'black'}, pctdistance=1.2
    )
    axes[1].set_title("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", fontsize=12, pad=15)  # –î–æ–±–∞–≤–∏–ª –æ—Ç—Å—Ç—É–ø

    # –õ–µ–≥–µ–Ω–¥–∞ –≤–Ω–∏–∑—É
    handles = [plt.Line2D([0], [0], color=color, lw=4) for color in colors]
    fig.legend(handles, categories, loc="lower center", ncol=4, fontsize=10)

    plt.subplots_adjust(top=0.85, bottom=0.15)  # –î–≤–∏–≥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–Ω—É—Ç—Ä—å, –ª–µ–≥–µ–Ω–¥—É –≤–Ω–∏–∑


    
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)

    photo = BufferedInputFile(buffer.getvalue(), filename="inflation.png")
    
    await message.answer_photo(photo=photo, caption=inflation_message + this_month_summary + last_month_summary + recommendations, reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü (8 –∑–Ω–∞—á–µ–Ω–∏–π)
@dp.message(lambda message: message.text and len(message.text.split()) == 8)
async def handle_one_month_input(message: Message):
    user_id = message.from_user.id
    data = message.text.split()

    try:
        month = data[0]
        expenses = list(map(float, data[1:]))
        
        conn = sqlite3.connect("expenses.db")
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM expenses WHERE user_id = ? AND month = ?", (user_id, month))
        existing_record = cursor.fetchone()

        if existing_record:
            await message.answer(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –∑–∞ –º–µ—Å—è—Ü {month} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –º–µ—Å—è—Ü.")
        else:
            cursor.execute(
                '''INSERT INTO expenses (user_id, month, food, transport, housing, clothing, entertainment, health, education) 
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''', 
                (user_id, month, *expenses)
            )
            conn.commit()
            
            cursor.execute("SELECT * FROM expenses WHERE user_id = ? ORDER BY month DESC LIMIT 2", (user_id,))
            records = cursor.fetchall()
            conn.close()

            if len(records) == 2:
                await calculate_inflation(message)
            else:
                await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {month} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≤—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–≤–∞ –º–µ—Å—è—Ü–∞ (16 –∑–Ω–∞—á–µ–Ω–∏–π)
@dp.message(lambda message: message.text and len(message.text.split()) == 16)
async def handle_two_months_input(message: Message):
    user_id = message.from_user.id
    data = message.text.split()

    try:
        month1, expenses1 = data[0], list(map(float, data[1:8]))
        month2, expenses2 = data[8], list(map(float, data[9:]))
        
        conn = sqlite3.connect("expenses.db")
        cursor = conn.cursor()

        for month, expenses in [(month1, expenses1), (month2, expenses2)]:
            cursor.execute("SELECT * FROM expenses WHERE user_id = ? AND month = ?", (user_id, month))
            existing_record = cursor.fetchone()

            if not existing_record:
                cursor.execute(
                    '''INSERT INTO expenses (user_id, month, food, transport, housing, clothing, entertainment, health, education) 
                       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''', 
                    (user_id, month, *expenses)
                )

        conn.commit()
        conn.close()

        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –¥–≤–∞ –º–µ—Å—è—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await calculate_inflation(message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
